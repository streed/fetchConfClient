// Generated by CoffeeScript 1.7.1
(function() {
  var Client, Q, log4js, request, root,
    __slice = [].slice;

  log4js = require('log4js');

  request = require('request');

  Q = require('q');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Client = (function() {
    var InnerClient, instance;

    function Client() {}

    instance = null;

    Client.get = function(client_id, client_secret, api_url) {
      if (api_url == null) {
        api_url = "http://elt.li";
      }
      if (!instance) {
        instance = InnerClient.Builder().setClientId(client_id).setClientSecret(client_secret).setApiUri(api_url).build();
      }
      return instance;
    };

    InnerClient = (function() {
      var InnerBuilder, LOG;

      LOG = log4js.getLogger("client");

      InnerBuilder = (function() {
        function InnerBuilder() {
          this._clientId = "";
          this._clientSecret = "";
          this._apiUri = "https://elt.li/";
        }

        InnerBuilder.prototype.setClientId = function(_clientId) {
          this._clientId = _clientId;
          return this;
        };

        InnerBuilder.prototype.setClientSecret = function(_clientSecret) {
          this._clientSecret = _clientSecret;
          return this;
        };

        InnerBuilder.prototype.setApiUri = function(_apiUri) {
          this._apiUri = _apiUri;
          return this;
        };

        InnerBuilder.prototype.build = function() {
          var client;
          client = new Client(this._clientId, this._clientSecret, this._apiUri);
          return client.auth();
        };

        return InnerBuilder;

      })();

      InnerClient.Builder = function() {
        return new InnerBuilder;
      };

      function InnerClient(_clientId, _clientSecret, _apiUri) {
        this._clientId = _clientId;
        this._clientSecret = _clientSecret;
        this._apiUri = _apiUri;
      }

      InnerClient.prototype.auth = function() {
        var authDeferred, data, self;
        authDeferred = Q.defer();
        data = {
          grant_type: "client_credentials",
          client_id: this._clientId,
          client_secret: this._clientSecret
        };
        self = this;
        request.post(this._apiUri + "oauth/token", {
          form: data
        }, function(err, response, body) {
          body = JSON.parse(body);
          self._accessToken = body.access_token;
          self._refreshToken = body.refresh_token;
          return authDeferred.resolve(self);
        });
        return authDeferred.promise;
      };

      InnerClient.prototype.configs = function() {
        var configsDeferred, url;
        configsDeferred = Q.defer();
        url = this._apiUri + "api/config";
        request.get({
          url: url,
          headers: {
            "Authorization": "Bearer " + this._accessToken
          }
        }, function(err, resp, body) {
          body = JSON.parse(body);
          return configsDeferred.resolve(body);
        });
        return configsDeferred.promise;
      };

      InnerClient.prototype.config = function() {
        var configsDeferred, name, url;
        name = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        configsDeferred = Q.defer();
        name = name.join(",");
        url = this._apiUri + "api/config/" + name;
        request.get({
          url: url,
          headers: {
            "Authorization": "Bearer " + this._accessToken
          }
        }, function(err, resp, body) {
          body = JSON.parse(body);
          return configsDeferred.resolve(body);
        });
        return configsDeferred.promise;
      };

      return InnerClient;

    })();

    return Client;

  })();

  root.Client = Client;

}).call(this);
